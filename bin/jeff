#!/usr/bin/env node

var jeff    = require('../src/index.js');
var program = require('commander');

// So many options!
// But don't worry, Jeff can handle them all

program

// Primary options
.option('-s, --source <src file/glob expression>',      'Source of the file(s) to export. Can be defined as a regular expression', '*.swf')
.option('-i, --inputDir <dir>',                         'Input directory, directory must exist', '.')
.option('-o, --outDir <dir>',                           'Output directory', '.')

// Secondary options
.option('-S, --scope <scope>',                          'Scope of the animation to export, either \'classes\' or \'main\'', 'main')
.option('-r, --ratio <ratio>',                          'Image scale', '1')
.option('-f, --renderFrames <boolean/array of frames>', 'To extract specified frames of the animations as PNGs', 'false')

// Optimisation options
.option('-O, --imageOptim <boolean>',                   'To apply a lossless image compression', 'false')
.option('-q, --imageQuality <quality>',                 'Image quality. From 0 to 100', '100')
.option('-a, --createAtlas <boolean>',                  'To extract all the images of an animation into a single atlas', 'false')
.option('-p, --powerOf2Images <boolean>',               'To set the dimensions of output images to powers of 2', 'false')
.option('-M, --maxImageDim <number>',                   'Maximum image dimension', '2048')
.option('-m, --simplify <boolean>',                     'To simplify animations (reduce number of symbols)', 'false')
.option('-b, --beautify <boolean>',                     'To beautify JSON output', 'false')
.option('-n, --flatten <boolean>',                      'To extract a flat animation structure rather than a hierarchical structure', 'false')
.option('-c, --compressMatrices <boolean>',             'To extract animations with matrices under a compressed format', 'false')

// Advanced options
.option('-R, --exportAtRoot <boolean>',                 'To export everything at the root of the output directory', 'false')
.option('-C, --splitClasses <boolean>',                 'To split the different classes of the animation into several outputs', 'false')
.option('-d, --ignoreData <boolean>',                   'Not to export JSON meta-data', 'false')
.option('-I, --ignoreImages <boolean>',                 'Not to export images', 'false')
.option('-F, --filtering <filtering method>',           'Filtering that should be used when rendering the animation', 'linear')
.option('-e, --outlineEmphasis <coefficient>',          'Emphasis of outlines when rendering Flash vectorial drawings', '1')
.option('-V, --version <int>', 			 		        'If specified, force decompiler to attempt to decompile as if the swf was specified version', '-1')
.option('-L, --verbosity <int>', 			 			'(L)og Level. 1-10, 1 showing least, 10 showing the most. Default is 3', '3')

.parse(process.argv);

var exportParams = {
	// Primary options
	inputDir:           program.inputDir,
	outDir:             program.outDir || '.', // By default, always writing to disk when JEFF used in command line
	source:             program.source,

	// Secondary options
	scope:              program.scope,
	ratio:              JSON.parse(program.ratio),
	renderFrames:       JSON.parse(program.renderFrames),

	// Optimisation options
	imageOptim:         JSON.parse(program.imageOptim),
	imageQuality:       JSON.parse(program.imageQuality),
	createAtlas:        JSON.parse(program.createAtlas),
	powerOf2Images:     JSON.parse(program.powerOf2Images),
	maxImageDim:        JSON.parse(program.maxImageDim),
	simplify:           JSON.parse(program.simplify),
	beautify:           JSON.parse(program.beautify),
	flatten:            JSON.parse(program.flatten),
	compressMatrices:   JSON.parse(program.compressMatrices),

	// Advanced options
	splitClasses:       JSON.parse(program.splitClasses),
	exportAtRoot:       JSON.parse(program.exportAtRoot),
	ignoreData:         JSON.parse(program.ignoreData),
	ignoreImages:       JSON.parse(program.ignoreImages),
	filtering:          program.filtering,
	outlineEmphasis:    JSON.parse(program.outlineEmphasis),
	forceVersion: 		JSON.parse(program.version),
	verbosity:   		JSON.parse(program.verbosity)
};

// Creating a new Jeff
jeff(exportParams);
// Waving Jeff good bye
